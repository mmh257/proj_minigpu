$date
	Thu Jan  9 11:48:32 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module wrapper_cu $end
$var wire 1 ! \read_req_rdy[0] $end
$upscope $end
$scope module wrapper_cu $end
$var wire 1 " \read_req_rdy[1] $end
$upscope $end
$scope module wrapper_cu $end
$var wire 1 # \read_req_rdy[2] $end
$upscope $end
$scope module wrapper_cu $end
$var wire 1 $ \read_req_rdy[3] $end
$upscope $end
$scope module wrapper_cu $end
$scope module inst_cu $end
$var wire 3 % active_threads [2:0] $end
$var wire 1 & clk $end
$var wire 4 ' compute_state [3:0] $end
$var wire 1 ( cu_enable $end
$var wire 1 ) fetch_req_rdy $end
$var wire 16 * fetch_resp_inst [15:0] $end
$var wire 1 + fetch_resp_val $end
$var wire 1 , reset $end
$var wire 4 - rs2 [3:0] $end
$var wire 4 . rs1 [3:0] $end
$var wire 4 / rimm [3:0] $end
$var wire 1 0 rf_wen $end
$var wire 1 1 rf_ren $end
$var wire 4 2 rd [3:0] $end
$var wire 4 3 opcode [3:0] $end
$var wire 1 4 mem_wen $end
$var wire 1 5 mem_ren $end
$var wire 1 6 is_store $end
$var wire 1 7 is_nop $end
$var wire 1 8 is_load $end
$var wire 1 9 is_jr $end
$var wire 1 : is_const $end
$var wire 1 ; is_branch $end
$var wire 1 < is_alu $end
$var wire 8 = imm [7:0] $end
$var wire 2 > fetch_state [1:0] $end
$var wire 1 ? fetch_resp_rdy $end
$var wire 1 @ fetch_req_val $end
$var wire 8 A fetch_req_addr [7:0] $end
$var wire 16 B fetch_instr [15:0] $end
$var wire 4 C cu_state [3:0] $end
$var wire 1 D cu_complete $end
$var wire 4 E alu_func [3:0] $end
$var parameter 32 F CU_IDX $end
$var parameter 32 G DATA_ADDR_WIDTH $end
$var parameter 32 H DATA_WIDTH $end
$var parameter 32 I INST_MSG_WIDTH $end
$var parameter 32 J NUM_THREADS $end
$var parameter 32 K PC_ADDR_WIDTH $end
$upscope $end
$upscope $end
$scope module wrapper_cu $end
$scope module inst_cu $end
$scope module inst_scheduler $end
$var wire 4 L alu_func [3:0] $end
$var wire 1 & clk $end
$var wire 1 D cu_complete $end
$var wire 1 ( cu_enable $end
$var wire 2 M fetch_state [1:0] $end
$var wire 8 N imm [7:0] $end
$var wire 1 < is_alu $end
$var wire 1 ; is_branch $end
$var wire 1 : is_const $end
$var wire 1 9 is_jr $end
$var wire 1 8 is_load $end
$var wire 1 7 is_nop $end
$var wire 1 6 is_store $end
$var wire 1 5 mem_ren $end
$var wire 1 4 mem_wen $end
$var wire 8 O next_pc [7:0] $end
$var wire 4 P rd [3:0] $end
$var wire 1 , reset $end
$var wire 1 1 rf_ren $end
$var wire 1 0 rf_wen $end
$var wire 4 Q rimm [3:0] $end
$var wire 4 R rs1 [3:0] $end
$var wire 4 S rs2 [3:0] $end
$var wire 4 T cu_state [3:0] $end
$var parameter 32 U CU_WIDTH $end
$var parameter 4 V DECODE $end
$var parameter 4 W DONE $end
$var parameter 4 X EXECUTE $end
$var parameter 4 Y FETCH $end
$var parameter 2 Z FT_DONE $end
$var parameter 2 [ FT_IDLE $end
$var parameter 2 \ FT_REQ $end
$var parameter 2 ] FT_WAIT $end
$var parameter 4 ^ IDLE $end
$var parameter 2 _ LSU_DONE $end
$var parameter 2 ` LSU_IDLE $end
$var parameter 2 a LSU_REQ $end
$var parameter 2 b LSU_WAIT $end
$var parameter 32 c PC_ADDR_WIDTH $end
$var parameter 4 d REQ $end
$var parameter 4 e WAIT $end
$var parameter 4 f WRITEBACK $end
$var reg 1 g cu_complete_reg $end
$var reg 4 h cu_state_reg [3:0] $end
$var reg 1 i mem_ren_reg $end
$var reg 1 j mem_wen_reg $end
$var reg 1 k rf_ren_reg $end
$var reg 1 l rf_wen_reg $end
$var reg 1 m wait_check $end
$var integer 32 n ii [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module wrapper_cu $end
$scope module inst_cu $end
$scope module inst_fetcher $end
$var wire 1 & clk $end
$var wire 8 o curr_pc [7:0] $end
$var wire 8 p fetch_req_addr [7:0] $end
$var wire 1 ) fetch_req_rdy $end
$var wire 1 @ fetch_req_val $end
$var wire 16 q fetch_resp_inst [15:0] $end
$var wire 1 ? fetch_resp_rdy $end
$var wire 1 + fetch_resp_val $end
$var wire 2 r fetch_state [1:0] $end
$var wire 1 , reset $end
$var wire 16 s fetch_instr [15:0] $end
$var wire 4 t cu_state [3:0] $end
$var parameter 4 u DECODE $end
$var parameter 4 v DONE $end
$var parameter 4 w EXECUTE $end
$var parameter 4 x FETCH $end
$var parameter 2 y FT_DONE $end
$var parameter 2 z FT_IDLE $end
$var parameter 2 { FT_REQ $end
$var parameter 2 | FT_WAIT $end
$var parameter 4 } IDLE $end
$var parameter 32 ~ INST_MSG_WIDTH $end
$var parameter 32 !" PC_ADDR_WIDTH $end
$var parameter 4 "" REQ $end
$var parameter 4 #" WAIT $end
$var parameter 4 $" WRITEBACK $end
$var reg 16 %" fetch_instr_reg [15:0] $end
$var reg 8 &" fetch_req_addr_reg [7:0] $end
$var reg 1 '" fetch_req_val_reg $end
$var reg 1 (" fetch_resp_rdy_reg $end
$var reg 2 )" fetch_state_reg [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module wrapper_cu $end
$scope module inst_cu $end
$scope module inst_decoder $end
$var wire 4 *" alu_func [3:0] $end
$var wire 1 & clk $end
$var wire 8 +" imm [7:0] $end
$var wire 1 < is_alu $end
$var wire 1 ; is_branch $end
$var wire 1 : is_const $end
$var wire 1 9 is_jr $end
$var wire 1 8 is_load $end
$var wire 1 7 is_nop $end
$var wire 1 6 is_store $end
$var wire 4 ," rd [3:0] $end
$var wire 1 , reset $end
$var wire 4 -" rimm [3:0] $end
$var wire 4 ." rs1 [3:0] $end
$var wire 4 /" rs2 [3:0] $end
$var wire 4 0" opcode [3:0] $end
$var wire 16 1" instr [15:0] $end
$var wire 4 2" cu_state [3:0] $end
$var parameter 4 3" ADD $end
$var parameter 4 4" BEQ $end
$var parameter 4 5" BGT $end
$var parameter 4 6" BLT $end
$var parameter 4 7" BNE $end
$var parameter 4 8" CONST $end
$var parameter 4 9" DECODE $end
$var parameter 4 :" DIV $end
$var parameter 32 ;" INST_MSG_WIDTH $end
$var parameter 4 <" JR $end
$var parameter 4 =" LW $end
$var parameter 4 >" MUL $end
$var parameter 4 ?" NOP $end
$var parameter 32 @" PC_ADDR_WIDTH $end
$var parameter 4 A" SUB $end
$var parameter 4 B" SW $end
$var parameter 4 C" alu_add $end
$var parameter 4 D" alu_and $end
$var parameter 4 E" alu_cmp $end
$var parameter 4 F" alu_div $end
$var parameter 4 G" alu_mul $end
$var parameter 4 H" alu_or $end
$var parameter 4 I" alu_sll $end
$var parameter 4 J" alu_srl $end
$var parameter 4 K" alu_sub $end
$var reg 4 L" alu_func_reg [3:0] $end
$var reg 8 M" imm_reg [7:0] $end
$var reg 1 N" is_alu_reg $end
$var reg 1 O" is_branch_reg $end
$var reg 1 P" is_const_reg $end
$var reg 1 Q" is_jr_reg $end
$var reg 1 R" is_load_reg $end
$var reg 1 S" is_nop_reg $end
$var reg 1 T" is_store_reg $end
$var reg 4 U" rd_reg [3:0] $end
$var reg 4 V" rimm_reg [3:0] $end
$var reg 4 W" rs1_reg [3:0] $end
$var reg 4 X" rs2_reg [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module wrapper_cu $end
$scope module inst_cu $end
$scope begin genblk1[0] $end
$var wire 1 Y" is_read $end
$var parameter 2 Z" i $end
$scope module inst_alu $end
$var wire 16 [" a [15:0] $end
$var wire 1 \" alu_en $end
$var wire 16 ]" b [15:0] $end
$var wire 1 & clk $end
$var wire 1 ^" cmp_eq $end
$var wire 1 _" cmp_lt $end
$var wire 1 `" cmp_lte $end
$var wire 16 a" out [15:0] $end
$var wire 1 , reset $end
$var wire 4 b" alu_func [3:0] $end
$var parameter 4 c" alu_add $end
$var parameter 4 d" alu_and $end
$var parameter 4 e" alu_cmp $end
$var parameter 4 f" alu_div $end
$var parameter 4 g" alu_mul $end
$var parameter 4 h" alu_or $end
$var parameter 4 i" alu_sll $end
$var parameter 4 j" alu_srl $end
$var parameter 4 k" alu_sub $end
$var reg 16 l" alu_reg_out [15:0] $end
$var reg 1 m" cmp_reg_eq $end
$var reg 1 n" cmp_reg_lt $end
$var reg 1 o" cmp_reg_lte $end
$upscope $end
$scope module inst_lsu $end
$var wire 1 & clk $end
$var wire 16 p" lsu_data_out [15:0] $end
$var wire 1 q" lsu_en $end
$var wire 1 r" read_req_rdy $end
$var wire 16 s" read_resp_data [15:0] $end
$var wire 1 t" read_resp_data_val $end
$var wire 1 , reset $end
$var wire 1 u" write_req_rdy $end
$var wire 1 v" write_resp_val $end
$var wire 1 w" write_req_val $end
$var wire 16 x" write_req_data [15:0] $end
$var wire 8 y" write_req_addr [7:0] $end
$var wire 16 z" rs2 [15:0] $end
$var wire 16 {" rs1 [15:0] $end
$var wire 1 |" read_resp_rdy $end
$var wire 1 }" read_req_addr_val $end
$var wire 8 ~" read_req_addr [7:0] $end
$var wire 1 4 mem_wen $end
$var wire 1 5 mem_ren $end
$var wire 2 !# lsu_state [1:0] $end
$var wire 4 "# cu_state [3:0] $end
$var parameter 32 ## DATA_ADDR_WIDTH $end
$var parameter 32 $# DATA_WIDTH $end
$var parameter 4 %# DECODE $end
$var parameter 4 &# DONE $end
$var parameter 4 '# EXECUTE $end
$var parameter 4 (# FETCH $end
$var parameter 4 )# IDLE $end
$var parameter 2 *# LSU_DONE $end
$var parameter 2 +# LSU_IDLE $end
$var parameter 2 ,# LSU_REQ $end
$var parameter 2 -# LSU_WAIT $end
$var parameter 4 .# REQ $end
$var parameter 4 /# WAIT $end
$var parameter 4 0# WRITEBACK $end
$var reg 16 1# lsu_data_out_reg [15:0] $end
$var reg 2 2# lsu_state_reg [1:0] $end
$var reg 8 3# read_req_addr_reg [7:0] $end
$var reg 1 }" read_req_addr_val_reg $end
$var reg 1 |" read_resp_rdy_reg $end
$var reg 8 4# write_req_addr_reg [7:0] $end
$var reg 16 5# write_req_data_reg [15:0] $end
$var reg 1 w" write_req_val_reg $end
$upscope $end
$scope module inst_pc $end
$var wire 16 6# alu_out [15:0] $end
$var wire 1 & clk $end
$var wire 1 ^" cmp_eq $end
$var wire 1 _" cmp_lt $end
$var wire 8 7# curr_pc [7:0] $end
$var wire 8 8# next_pc [7:0] $end
$var wire 1 9# pc_en $end
$var wire 1 , reset $end
$var wire 4 :# opcode [3:0] $end
$var wire 4 ;# cu_state [3:0] $end
$var wire 16 <# br_imm [15:0] $end
$var wire 4 =# alu_func [3:0] $end
$var parameter 4 ># BEQ $end
$var parameter 4 ?# BGT $end
$var parameter 4 @# BLT $end
$var parameter 4 A# BNE $end
$var parameter 4 B# CMP $end
$var parameter 32 C# DATA_WIDTH $end
$var parameter 4 D# EXECUTE $end
$var parameter 32 E# PC_ADDR_WIDTH $end
$var reg 8 F# next_pc_reg [7:0] $end
$upscope $end
$scope module inst_rf $end
$var wire 16 G# alu_out_data [15:0] $end
$var wire 1 & clk $end
$var wire 16 H# cu_id [15:0] $end
$var wire 1 Y" is_read $end
$var wire 16 I# lsu_load_data [15:0] $end
$var wire 1 , reset $end
$var wire 4 J# rf_addr [3:0] $end
$var wire 16 K# rf_data [15:0] $end
$var wire 1 L# rf_enable $end
$var wire 16 M# rimm_data [15:0] $end
$var wire 16 N# rs1_data [15:0] $end
$var wire 16 O# rs2_data [15:0] $end
$var wire 1 0 rf_wen $end
$var wire 1 1 rf_ren $end
$var wire 1 : is_const $end
$var wire 1 < is_alu $end
$var wire 4 P# decoded_rs2 [3:0] $end
$var wire 4 Q# decoded_rs1 [3:0] $end
$var wire 4 R# decoded_rimm [3:0] $end
$var wire 4 S# decoded_rd [3:0] $end
$var wire 8 T# decoded_imm [7:0] $end
$var wire 4 U# cu_state [3:0] $end
$var parameter 32 V# CU_IDX $end
$var parameter 32 W# CU_WIDTH $end
$var parameter 32 X# DATA_WIDTH $end
$var parameter 4 Y# DECODE $end
$var parameter 4 Z# DONE $end
$var parameter 4 [# EXECUTE $end
$var parameter 4 \# FETCH $end
$var parameter 4 ]# IDLE $end
$var parameter 4 ^# REQ $end
$var parameter 32 _# THREAD_ID $end
$var parameter 4 `# WAIT $end
$var parameter 4 a# WRITEBACK $end
$var reg 16 b# rimm_data_reg [15:0] $end
$var reg 16 c# rs1_data_reg [15:0] $end
$var reg 16 d# rs2_data_reg [15:0] $end
$var integer 32 e# i [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 1 f# is_read $end
$var parameter 2 g# i $end
$scope module inst_alu $end
$var wire 16 h# a [15:0] $end
$var wire 1 i# alu_en $end
$var wire 16 j# b [15:0] $end
$var wire 1 & clk $end
$var wire 1 k# cmp_eq $end
$var wire 1 l# cmp_lt $end
$var wire 1 m# cmp_lte $end
$var wire 16 n# out [15:0] $end
$var wire 1 , reset $end
$var wire 4 o# alu_func [3:0] $end
$var parameter 4 p# alu_add $end
$var parameter 4 q# alu_and $end
$var parameter 4 r# alu_cmp $end
$var parameter 4 s# alu_div $end
$var parameter 4 t# alu_mul $end
$var parameter 4 u# alu_or $end
$var parameter 4 v# alu_sll $end
$var parameter 4 w# alu_srl $end
$var parameter 4 x# alu_sub $end
$var reg 16 y# alu_reg_out [15:0] $end
$var reg 1 z# cmp_reg_eq $end
$var reg 1 {# cmp_reg_lt $end
$var reg 1 |# cmp_reg_lte $end
$upscope $end
$scope module inst_lsu $end
$var wire 1 & clk $end
$var wire 16 }# lsu_data_out [15:0] $end
$var wire 1 ~# lsu_en $end
$var wire 1 !$ read_req_rdy $end
$var wire 16 "$ read_resp_data [15:0] $end
$var wire 1 #$ read_resp_data_val $end
$var wire 1 , reset $end
$var wire 1 $$ write_req_rdy $end
$var wire 1 %$ write_resp_val $end
$var wire 1 &$ write_req_val $end
$var wire 16 '$ write_req_data [15:0] $end
$var wire 8 ($ write_req_addr [7:0] $end
$var wire 16 )$ rs2 [15:0] $end
$var wire 16 *$ rs1 [15:0] $end
$var wire 1 +$ read_resp_rdy $end
$var wire 1 ,$ read_req_addr_val $end
$var wire 8 -$ read_req_addr [7:0] $end
$var wire 1 4 mem_wen $end
$var wire 1 5 mem_ren $end
$var wire 2 .$ lsu_state [1:0] $end
$var wire 4 /$ cu_state [3:0] $end
$var parameter 32 0$ DATA_ADDR_WIDTH $end
$var parameter 32 1$ DATA_WIDTH $end
$var parameter 4 2$ DECODE $end
$var parameter 4 3$ DONE $end
$var parameter 4 4$ EXECUTE $end
$var parameter 4 5$ FETCH $end
$var parameter 4 6$ IDLE $end
$var parameter 2 7$ LSU_DONE $end
$var parameter 2 8$ LSU_IDLE $end
$var parameter 2 9$ LSU_REQ $end
$var parameter 2 :$ LSU_WAIT $end
$var parameter 4 ;$ REQ $end
$var parameter 4 <$ WAIT $end
$var parameter 4 =$ WRITEBACK $end
$var reg 16 >$ lsu_data_out_reg [15:0] $end
$var reg 2 ?$ lsu_state_reg [1:0] $end
$var reg 8 @$ read_req_addr_reg [7:0] $end
$var reg 1 ,$ read_req_addr_val_reg $end
$var reg 1 +$ read_resp_rdy_reg $end
$var reg 8 A$ write_req_addr_reg [7:0] $end
$var reg 16 B$ write_req_data_reg [15:0] $end
$var reg 1 &$ write_req_val_reg $end
$upscope $end
$scope module inst_pc $end
$var wire 16 C$ alu_out [15:0] $end
$var wire 1 & clk $end
$var wire 1 k# cmp_eq $end
$var wire 1 l# cmp_lt $end
$var wire 8 D$ curr_pc [7:0] $end
$var wire 8 E$ next_pc [7:0] $end
$var wire 1 F$ pc_en $end
$var wire 1 , reset $end
$var wire 4 G$ opcode [3:0] $end
$var wire 4 H$ cu_state [3:0] $end
$var wire 16 I$ br_imm [15:0] $end
$var wire 4 J$ alu_func [3:0] $end
$var parameter 4 K$ BEQ $end
$var parameter 4 L$ BGT $end
$var parameter 4 M$ BLT $end
$var parameter 4 N$ BNE $end
$var parameter 4 O$ CMP $end
$var parameter 32 P$ DATA_WIDTH $end
$var parameter 4 Q$ EXECUTE $end
$var parameter 32 R$ PC_ADDR_WIDTH $end
$var reg 8 S$ next_pc_reg [7:0] $end
$upscope $end
$scope module inst_rf $end
$var wire 16 T$ alu_out_data [15:0] $end
$var wire 1 & clk $end
$var wire 16 U$ cu_id [15:0] $end
$var wire 1 f# is_read $end
$var wire 16 V$ lsu_load_data [15:0] $end
$var wire 1 , reset $end
$var wire 4 W$ rf_addr [3:0] $end
$var wire 16 X$ rf_data [15:0] $end
$var wire 1 Y$ rf_enable $end
$var wire 16 Z$ rimm_data [15:0] $end
$var wire 16 [$ rs1_data [15:0] $end
$var wire 16 \$ rs2_data [15:0] $end
$var wire 1 0 rf_wen $end
$var wire 1 1 rf_ren $end
$var wire 1 : is_const $end
$var wire 1 < is_alu $end
$var wire 4 ]$ decoded_rs2 [3:0] $end
$var wire 4 ^$ decoded_rs1 [3:0] $end
$var wire 4 _$ decoded_rimm [3:0] $end
$var wire 4 `$ decoded_rd [3:0] $end
$var wire 8 a$ decoded_imm [7:0] $end
$var wire 4 b$ cu_state [3:0] $end
$var parameter 32 c$ CU_IDX $end
$var parameter 32 d$ CU_WIDTH $end
$var parameter 32 e$ DATA_WIDTH $end
$var parameter 4 f$ DECODE $end
$var parameter 4 g$ DONE $end
$var parameter 4 h$ EXECUTE $end
$var parameter 4 i$ FETCH $end
$var parameter 4 j$ IDLE $end
$var parameter 4 k$ REQ $end
$var parameter 32 l$ THREAD_ID $end
$var parameter 4 m$ WAIT $end
$var parameter 4 n$ WRITEBACK $end
$var reg 16 o$ rimm_data_reg [15:0] $end
$var reg 16 p$ rs1_data_reg [15:0] $end
$var reg 16 q$ rs2_data_reg [15:0] $end
$var integer 32 r$ i [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 1 s$ is_read $end
$var parameter 3 t$ i $end
$scope module inst_alu $end
$var wire 16 u$ a [15:0] $end
$var wire 1 v$ alu_en $end
$var wire 16 w$ b [15:0] $end
$var wire 1 & clk $end
$var wire 1 x$ cmp_eq $end
$var wire 1 y$ cmp_lt $end
$var wire 1 z$ cmp_lte $end
$var wire 16 {$ out [15:0] $end
$var wire 1 , reset $end
$var wire 4 |$ alu_func [3:0] $end
$var parameter 4 }$ alu_add $end
$var parameter 4 ~$ alu_and $end
$var parameter 4 !% alu_cmp $end
$var parameter 4 "% alu_div $end
$var parameter 4 #% alu_mul $end
$var parameter 4 $% alu_or $end
$var parameter 4 %% alu_sll $end
$var parameter 4 &% alu_srl $end
$var parameter 4 '% alu_sub $end
$var reg 16 (% alu_reg_out [15:0] $end
$var reg 1 )% cmp_reg_eq $end
$var reg 1 *% cmp_reg_lt $end
$var reg 1 +% cmp_reg_lte $end
$upscope $end
$scope module inst_lsu $end
$var wire 1 & clk $end
$var wire 16 ,% lsu_data_out [15:0] $end
$var wire 1 -% lsu_en $end
$var wire 1 .% read_req_rdy $end
$var wire 16 /% read_resp_data [15:0] $end
$var wire 1 0% read_resp_data_val $end
$var wire 1 , reset $end
$var wire 1 1% write_req_rdy $end
$var wire 1 2% write_resp_val $end
$var wire 1 3% write_req_val $end
$var wire 16 4% write_req_data [15:0] $end
$var wire 8 5% write_req_addr [7:0] $end
$var wire 16 6% rs2 [15:0] $end
$var wire 16 7% rs1 [15:0] $end
$var wire 1 8% read_resp_rdy $end
$var wire 1 9% read_req_addr_val $end
$var wire 8 :% read_req_addr [7:0] $end
$var wire 1 4 mem_wen $end
$var wire 1 5 mem_ren $end
$var wire 2 ;% lsu_state [1:0] $end
$var wire 4 <% cu_state [3:0] $end
$var parameter 32 =% DATA_ADDR_WIDTH $end
$var parameter 32 >% DATA_WIDTH $end
$var parameter 4 ?% DECODE $end
$var parameter 4 @% DONE $end
$var parameter 4 A% EXECUTE $end
$var parameter 4 B% FETCH $end
$var parameter 4 C% IDLE $end
$var parameter 2 D% LSU_DONE $end
$var parameter 2 E% LSU_IDLE $end
$var parameter 2 F% LSU_REQ $end
$var parameter 2 G% LSU_WAIT $end
$var parameter 4 H% REQ $end
$var parameter 4 I% WAIT $end
$var parameter 4 J% WRITEBACK $end
$var reg 16 K% lsu_data_out_reg [15:0] $end
$var reg 2 L% lsu_state_reg [1:0] $end
$var reg 8 M% read_req_addr_reg [7:0] $end
$var reg 1 9% read_req_addr_val_reg $end
$var reg 1 8% read_resp_rdy_reg $end
$var reg 8 N% write_req_addr_reg [7:0] $end
$var reg 16 O% write_req_data_reg [15:0] $end
$var reg 1 3% write_req_val_reg $end
$upscope $end
$scope module inst_pc $end
$var wire 16 P% alu_out [15:0] $end
$var wire 1 & clk $end
$var wire 1 x$ cmp_eq $end
$var wire 1 y$ cmp_lt $end
$var wire 8 Q% curr_pc [7:0] $end
$var wire 8 R% next_pc [7:0] $end
$var wire 1 S% pc_en $end
$var wire 1 , reset $end
$var wire 4 T% opcode [3:0] $end
$var wire 4 U% cu_state [3:0] $end
$var wire 16 V% br_imm [15:0] $end
$var wire 4 W% alu_func [3:0] $end
$var parameter 4 X% BEQ $end
$var parameter 4 Y% BGT $end
$var parameter 4 Z% BLT $end
$var parameter 4 [% BNE $end
$var parameter 4 \% CMP $end
$var parameter 32 ]% DATA_WIDTH $end
$var parameter 4 ^% EXECUTE $end
$var parameter 32 _% PC_ADDR_WIDTH $end
$var reg 8 `% next_pc_reg [7:0] $end
$upscope $end
$scope module inst_rf $end
$var wire 16 a% alu_out_data [15:0] $end
$var wire 1 & clk $end
$var wire 16 b% cu_id [15:0] $end
$var wire 1 s$ is_read $end
$var wire 16 c% lsu_load_data [15:0] $end
$var wire 1 , reset $end
$var wire 4 d% rf_addr [3:0] $end
$var wire 16 e% rf_data [15:0] $end
$var wire 1 f% rf_enable $end
$var wire 16 g% rimm_data [15:0] $end
$var wire 16 h% rs1_data [15:0] $end
$var wire 16 i% rs2_data [15:0] $end
$var wire 1 0 rf_wen $end
$var wire 1 1 rf_ren $end
$var wire 1 : is_const $end
$var wire 1 < is_alu $end
$var wire 4 j% decoded_rs2 [3:0] $end
$var wire 4 k% decoded_rs1 [3:0] $end
$var wire 4 l% decoded_rimm [3:0] $end
$var wire 4 m% decoded_rd [3:0] $end
$var wire 8 n% decoded_imm [7:0] $end
$var wire 4 o% cu_state [3:0] $end
$var parameter 32 p% CU_IDX $end
$var parameter 32 q% CU_WIDTH $end
$var parameter 32 r% DATA_WIDTH $end
$var parameter 4 s% DECODE $end
$var parameter 4 t% DONE $end
$var parameter 4 u% EXECUTE $end
$var parameter 4 v% FETCH $end
$var parameter 4 w% IDLE $end
$var parameter 4 x% REQ $end
$var parameter 32 y% THREAD_ID $end
$var parameter 4 z% WAIT $end
$var parameter 4 {% WRITEBACK $end
$var reg 16 |% rimm_data_reg [15:0] $end
$var reg 16 }% rs1_data_reg [15:0] $end
$var reg 16 ~% rs2_data_reg [15:0] $end
$var integer 32 !& i [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var wire 1 "& is_read $end
$var parameter 3 #& i $end
$scope module inst_alu $end
$var wire 16 $& a [15:0] $end
$var wire 1 %& alu_en $end
$var wire 16 && b [15:0] $end
$var wire 1 & clk $end
$var wire 1 '& cmp_eq $end
$var wire 1 (& cmp_lt $end
$var wire 1 )& cmp_lte $end
$var wire 16 *& out [15:0] $end
$var wire 1 , reset $end
$var wire 4 +& alu_func [3:0] $end
$var parameter 4 ,& alu_add $end
$var parameter 4 -& alu_and $end
$var parameter 4 .& alu_cmp $end
$var parameter 4 /& alu_div $end
$var parameter 4 0& alu_mul $end
$var parameter 4 1& alu_or $end
$var parameter 4 2& alu_sll $end
$var parameter 4 3& alu_srl $end
$var parameter 4 4& alu_sub $end
$var reg 16 5& alu_reg_out [15:0] $end
$var reg 1 6& cmp_reg_eq $end
$var reg 1 7& cmp_reg_lt $end
$var reg 1 8& cmp_reg_lte $end
$upscope $end
$scope module inst_lsu $end
$var wire 1 & clk $end
$var wire 16 9& lsu_data_out [15:0] $end
$var wire 1 :& lsu_en $end
$var wire 1 ;& read_req_rdy $end
$var wire 16 <& read_resp_data [15:0] $end
$var wire 1 =& read_resp_data_val $end
$var wire 1 , reset $end
$var wire 1 >& write_req_rdy $end
$var wire 1 ?& write_resp_val $end
$var wire 1 @& write_req_val $end
$var wire 16 A& write_req_data [15:0] $end
$var wire 8 B& write_req_addr [7:0] $end
$var wire 16 C& rs2 [15:0] $end
$var wire 16 D& rs1 [15:0] $end
$var wire 1 E& read_resp_rdy $end
$var wire 1 F& read_req_addr_val $end
$var wire 8 G& read_req_addr [7:0] $end
$var wire 1 4 mem_wen $end
$var wire 1 5 mem_ren $end
$var wire 2 H& lsu_state [1:0] $end
$var wire 4 I& cu_state [3:0] $end
$var parameter 32 J& DATA_ADDR_WIDTH $end
$var parameter 32 K& DATA_WIDTH $end
$var parameter 4 L& DECODE $end
$var parameter 4 M& DONE $end
$var parameter 4 N& EXECUTE $end
$var parameter 4 O& FETCH $end
$var parameter 4 P& IDLE $end
$var parameter 2 Q& LSU_DONE $end
$var parameter 2 R& LSU_IDLE $end
$var parameter 2 S& LSU_REQ $end
$var parameter 2 T& LSU_WAIT $end
$var parameter 4 U& REQ $end
$var parameter 4 V& WAIT $end
$var parameter 4 W& WRITEBACK $end
$var reg 16 X& lsu_data_out_reg [15:0] $end
$var reg 2 Y& lsu_state_reg [1:0] $end
$var reg 8 Z& read_req_addr_reg [7:0] $end
$var reg 1 F& read_req_addr_val_reg $end
$var reg 1 E& read_resp_rdy_reg $end
$var reg 8 [& write_req_addr_reg [7:0] $end
$var reg 16 \& write_req_data_reg [15:0] $end
$var reg 1 @& write_req_val_reg $end
$upscope $end
$scope module inst_pc $end
$var wire 16 ]& alu_out [15:0] $end
$var wire 1 & clk $end
$var wire 1 '& cmp_eq $end
$var wire 1 (& cmp_lt $end
$var wire 8 ^& curr_pc [7:0] $end
$var wire 8 _& next_pc [7:0] $end
$var wire 1 `& pc_en $end
$var wire 1 , reset $end
$var wire 4 a& opcode [3:0] $end
$var wire 4 b& cu_state [3:0] $end
$var wire 16 c& br_imm [15:0] $end
$var wire 4 d& alu_func [3:0] $end
$var parameter 4 e& BEQ $end
$var parameter 4 f& BGT $end
$var parameter 4 g& BLT $end
$var parameter 4 h& BNE $end
$var parameter 4 i& CMP $end
$var parameter 32 j& DATA_WIDTH $end
$var parameter 4 k& EXECUTE $end
$var parameter 32 l& PC_ADDR_WIDTH $end
$var reg 8 m& next_pc_reg [7:0] $end
$upscope $end
$scope module inst_rf $end
$var wire 16 n& alu_out_data [15:0] $end
$var wire 1 & clk $end
$var wire 16 o& cu_id [15:0] $end
$var wire 1 "& is_read $end
$var wire 16 p& lsu_load_data [15:0] $end
$var wire 1 , reset $end
$var wire 4 q& rf_addr [3:0] $end
$var wire 16 r& rf_data [15:0] $end
$var wire 1 s& rf_enable $end
$var wire 16 t& rimm_data [15:0] $end
$var wire 16 u& rs1_data [15:0] $end
$var wire 16 v& rs2_data [15:0] $end
$var wire 1 0 rf_wen $end
$var wire 1 1 rf_ren $end
$var wire 1 : is_const $end
$var wire 1 < is_alu $end
$var wire 4 w& decoded_rs2 [3:0] $end
$var wire 4 x& decoded_rs1 [3:0] $end
$var wire 4 y& decoded_rimm [3:0] $end
$var wire 4 z& decoded_rd [3:0] $end
$var wire 8 {& decoded_imm [7:0] $end
$var wire 4 |& cu_state [3:0] $end
$var parameter 32 }& CU_IDX $end
$var parameter 32 ~& CU_WIDTH $end
$var parameter 32 !' DATA_WIDTH $end
$var parameter 4 "' DECODE $end
$var parameter 4 #' DONE $end
$var parameter 4 $' EXECUTE $end
$var parameter 4 %' FETCH $end
$var parameter 4 &' IDLE $end
$var parameter 4 '' REQ $end
$var parameter 32 (' THREAD_ID $end
$var parameter 4 )' WAIT $end
$var parameter 4 *' WRITEBACK $end
$var reg 16 +' rimm_data_reg [15:0] $end
$var reg 16 ,' rs1_data_reg [15:0] $end
$var reg 16 -' rs2_data_reg [15:0] $end
$var integer 32 .' i [31:0] $end
$upscope $end
$upscope $end
$scope module inst_decoder $end
$upscope $end
$scope module inst_fetcher $end
$upscope $end
$scope module inst_scheduler $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b110 *'
b100 )'
b11 ('
b11 ''
b0 &'
b1 %'
b101 $'
b111 #'
b10 "'
b10000 !'
b100 ~&
b0 }&
b1000 l&
b101 k&
b10000 j&
b1000 i&
b100 h&
b110 g&
b111 f&
b101 e&
b110 W&
b100 V&
b11 U&
b10 T&
b1 S&
b0 R&
b11 Q&
b0 P&
b1 O&
b101 N&
b111 M&
b10 L&
b10000 K&
b1000 J&
b1 4&
b110 3&
b1111 2&
b101 1&
b10 0&
b11 /&
b1000 .&
b100 -&
b0 ,&
b11 #&
b110 {%
b100 z%
b10 y%
b11 x%
b0 w%
b1 v%
b101 u%
b111 t%
b10 s%
b10000 r%
b100 q%
b0 p%
b1000 _%
b101 ^%
b10000 ]%
b1000 \%
b100 [%
b110 Z%
b111 Y%
b101 X%
b110 J%
b100 I%
b11 H%
b10 G%
b1 F%
b0 E%
b11 D%
b0 C%
b1 B%
b101 A%
b111 @%
b10 ?%
b10000 >%
b1000 =%
b1 '%
b110 &%
b1111 %%
b101 $%
b10 #%
b11 "%
b1000 !%
b100 ~$
b0 }$
b10 t$
b110 n$
b100 m$
b1 l$
b11 k$
b0 j$
b1 i$
b101 h$
b111 g$
b10 f$
b10000 e$
b100 d$
b0 c$
b1000 R$
b101 Q$
b10000 P$
b1000 O$
b100 N$
b110 M$
b111 L$
b101 K$
b110 =$
b100 <$
b11 ;$
b10 :$
b1 9$
b0 8$
b11 7$
b0 6$
b1 5$
b101 4$
b111 3$
b10 2$
b10000 1$
b1000 0$
b1 x#
b110 w#
b1111 v#
b101 u#
b10 t#
b11 s#
b1000 r#
b100 q#
b0 p#
b1 g#
b110 a#
b100 `#
b0 _#
b11 ^#
b0 ]#
b1 \#
b101 [#
b111 Z#
b10 Y#
b10000 X#
b100 W#
b0 V#
b1000 E#
b101 D#
b10000 C#
b1000 B#
b100 A#
b110 @#
b111 ?#
b101 >#
b110 0#
b100 /#
b11 .#
b10 -#
b1 ,#
b0 +#
b11 *#
b0 )#
b1 (#
b101 '#
b111 &#
b10 %#
b10000 $#
b1000 ##
b1 k"
b110 j"
b1111 i"
b101 h"
b10 g"
b11 f"
b1000 e"
b100 d"
b0 c"
b0 Z"
b1 K"
b110 J"
b1111 I"
b101 H"
b10 G"
b11 F"
b1000 E"
b100 D"
b0 C"
b1010 B"
b1 A"
b1000 @"
b1011 ?"
b10 >"
b1001 ="
b1100 <"
b10000 ;"
b11 :"
b10 9"
b1000 8"
b100 7"
b110 6"
b111 5"
b101 4"
b0 3"
b110 $"
b100 #"
b11 ""
b1000 !"
b10000 ~
b0 }
b10 |
b1 {
b0 z
b11 y
b1 x
b101 w
b111 v
b10 u
b110 f
b100 e
b11 d
b1000 c
b10 b
b1 a
b0 `
b11 _
b0 ^
b10 ]
b1 \
b0 [
b11 Z
b1 Y
b101 X
b111 W
b10 V
b100 U
b1000 K
b100 J
b10000 I
b10000 H
b1000 G
b0 F
$end
#0
$dumpvars
bx .'
bx -'
bx ,'
bx +'
bx |&
bx {&
bx z&
bx y&
bx x&
bx w&
bx v&
bx u&
bx t&
1s&
bz r&
bz q&
bx p&
b0 o&
b0 n&
bx m&
bx d&
bx c&
bx b&
bx a&
1`&
bx _&
bx ^&
b0 ]&
bx \&
bx [&
bx Z&
bx Y&
bx X&
bx I&
bx H&
bx G&
xF&
xE&
bx D&
bx C&
bx B&
bx A&
x@&
z?&
z>&
z=&
bz <&
z;&
1:&
bx 9&
x8&
x7&
x6&
b0 5&
bx +&
b0 *&
x)&
x(&
x'&
bx &&
1%&
bx $&
z"&
bx !&
bx ~%
bx }%
bx |%
bx o%
bx n%
bx m%
bx l%
bx k%
bx j%
bx i%
bx h%
bx g%
1f%
bz e%
bz d%
bx c%
b0 b%
b0 a%
bx `%
bx W%
bx V%
bx U%
bx T%
1S%
bx R%
bx Q%
b0 P%
bx O%
bx N%
bx M%
bx L%
bx K%
bx <%
bx ;%
bx :%
x9%
x8%
bx 7%
bx 6%
bx 5%
bx 4%
x3%
z2%
z1%
z0%
bz /%
z.%
1-%
bx ,%
x+%
x*%
x)%
b0 (%
bx |$
b0 {$
xz$
xy$
xx$
bx w$
1v$
bx u$
zs$
bx r$
bx q$
bx p$
bx o$
bx b$
bx a$
bx `$
bx _$
bx ^$
bx ]$
bx \$
bx [$
bx Z$
1Y$
bz X$
bz W$
bx V$
b0 U$
b0 T$
bx S$
bx J$
bx I$
bx H$
bx G$
1F$
bx E$
bx D$
b0 C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx /$
bx .$
bx -$
x,$
x+$
bx *$
bx )$
bx ($
bx '$
x&$
z%$
z$$
z#$
bz "$
z!$
1~#
bx }#
x|#
x{#
xz#
b0 y#
bx o#
b0 n#
xm#
xl#
xk#
bx j#
1i#
bx h#
zf#
bx e#
bx d#
bx c#
bx b#
bx U#
bx T#
bx S#
bx R#
bx Q#
bx P#
bx O#
bx N#
bx M#
1L#
bz K#
bz J#
bx I#
b0 H#
b0 G#
bx F#
bx =#
bx <#
bx ;#
bx :#
19#
bx 8#
bx 7#
b0 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx "#
bx !#
bx ~"
x}"
x|"
bx {"
bx z"
bx y"
bx x"
xw"
zv"
zu"
zt"
bz s"
zr"
1q"
bx p"
xo"
xn"
xm"
b0 l"
bx b"
b0 a"
x`"
x_"
x^"
bx ]"
1\"
bx ["
zY"
bx X"
bx W"
bx V"
bx U"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
bx M"
bx L"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
b0 )"
x("
x'"
bx &"
bx %"
bx t
bx s
b0 r
bz q
bx p
bx o
bx n
xm
xl
xk
xj
xi
bx h
xg
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b0 M
bx L
bx E
xD
bx C
bx B
bx A
x@
x?
b0 >
bx =
x<
x;
x:
x9
x8
x7
x6
x5
x4
bx 3
bx 2
x1
x0
bx /
bx .
bx -
0,
z+
bz *
z)
z(
bx '
1&
bz %
z$
z#
z"
z!
$end
#500
0&
#1000
09
0Q"
06
0T"
08
0R"
0:
0P"
0;
0O"
0<
0N"
b0 E
b0 L
b0 *"
b0 b"
b0 =#
b0 o#
b0 J$
b0 |$
b0 W%
b0 +&
b0 d&
b0 L"
b0 =
b0 N
b0 +"
b0 T#
b0 a$
b0 n%
b0 {&
b0 M"
b0 /
b0 Q
b0 -"
b0 R#
b0 _$
b0 l%
b0 y&
b0 V"
b0 -
b0 S
b0 /"
b0 P#
b0 ]$
b0 j%
b0 w&
b0 X"
b0 .
b0 R
b0 ."
b0 Q#
b0 ^$
b0 k%
b0 x&
b0 W"
b0 2
b0 P
b0 ,"
b0 S#
b0 `$
b0 m%
b0 z&
b0 U"
0?
0("
b0 A
b0 p
b0 &"
0@
0'"
0m
04
0j
05
0i
00
0l
01
0k
0D
0g
b0 '
b0 C
b0 T
b0 h
b0 t
b0 2"
b0 "#
b0 ;#
b0 U#
b0 /$
b0 H$
b0 b$
b0 <%
b0 U%
b0 o%
b0 I&
b0 b&
b0 |&
b0 _&
b0 m&
0@&
0E&
0F&
b0 H&
b0 Y&
b0 9&
b0 p&
b0 X&
0'&
06&
0)&
08&
0(&
07&
b0 c&
b0 t&
b0 +'
b0 C&
b0 v&
b0 -'
b0 D&
b0 u&
b0 ,'
b0 R%
b0 `%
03%
08%
09%
b0 ;%
b0 L%
b0 ,%
b0 c%
b0 K%
0x$
0)%
0z$
0+%
0y$
0*%
b0 V%
b0 g%
b0 |%
b0 6%
b0 i%
b0 ~%
b0 7%
b0 h%
b0 }%
b0 E$
b0 S$
0&$
0+$
0,$
b0 .$
b0 ?$
b0 }#
b0 V$
b0 >$
0k#
0z#
0m#
0|#
0l#
0{#
b0 I$
b0 Z$
b0 o$
b0 )$
b0 \$
b0 q$
b0 *$
b0 [$
b0 p$
b0 O
b0 8#
b0 F#
0w"
0|"
0}"
b0 !#
b0 2#
b0 p"
b0 I#
b0 1#
0^"
0m"
0`"
0o"
0_"
0n"
b0 <#
b0 M#
b0 b#
b0 z"
b0 O#
b0 d#
b0 {"
b0 N#
b0 c#
b100 n
b1101 .'
b1101 !&
b1101 r$
b1101 e#
1&
1,
#1500
0&
#2000
bx a"
bx 6#
bx G#
bx l"
bx n#
bx C$
bx T$
bx y#
bx {$
bx P%
bx a%
bx (%
bx *&
bx ]&
bx n&
bx 5&
1&
0,
#2500
0&
#3000
1&
#3500
0&
#4000
1&
#4500
0&
#5000
1&
#5500
0&
#6000
1&
#6500
0&
#7000
1&
#7500
0&
#8000
1&
#8500
0&
#9000
1&
#9500
0&
#10000
b1 '
b1 C
b1 T
b1 h
b1 t
b1 2"
b1 "#
b1 ;#
b1 U#
b1 /$
b1 H$
b1 b$
b1 <%
b1 U%
b1 o%
b1 I&
b1 b&
b1 |&
b100 n
1&
b0 *
b0 q
0+
1)
b100 %
1(
#10500
0&
#11000
b1 >
b1 M
b1 r
b1 )"
1&
#11001
